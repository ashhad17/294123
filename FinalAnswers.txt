Mock test answers
https://github.com/Ninja1102/MOCK-TEST.git
---------------------------------------------
Location

import { useEffect } from 'react';
 
const LocationMarker = ({ position, map, marker, onRemove }) => {
  useEffect(() => {
    if (!marker) return;
 
    const handleClick = () => {
      if (onRemove) onRemove();
      marker.setMap(null); // remove from map
    };
 
    marker.addListener("click", handleClick);
 
    // Cleanup on unmount
    return () => {
      window.google.maps.event.clearListeners(marker, "click");
    };
  }, [map, position, marker, onRemove]);
 
  return null;
};
 
export default LocationMarker;
--------------------------------------------------------------------------------------------------------------


import React, { useState, useEffect, useCallback } from "react";
import { Map, GoogleApiWrapper } from "google-maps-react";
import LocationMarker from "./LocationMarker";
 
export const App = ({ google }) => {
  const [properties, setProperties] = useState([]);
  const [searchQuery, setSearchQuery] = useState("");
  const [searchResults, setSearchResults] = useState([]);
  const [mapCenter, setMapCenter] = useState({ lat: 31.5497, lng: 74.3436 });
  const [map, setMap] = useState(null);
  const [markers, setMarkers] = useState([]);
 
  const handleMapReady = (mapProps, map) => {
    setMap(map);
    setMapCenter(map.center.toJSON());
  };
 
  const handleSearch = () => {
    if (!google || !google.maps) return;
 
    const service = new google.maps.places.PlacesService(map);
    service.textSearch({ query: searchQuery }, (results, status) => {
      if (status === "OK") {
        setSearchResults(results);
      }
    });
  };
 
  const handleAddLocation = (result) => {
    const location = result.geometry.location;
    const position = {
      lat: location.lat(),
      lng: location.lng(),
    };
 
    const marker = new google.maps.Marker({
      position,
      map,
      title: result.name,
    });
 
    setMarkers((prev) => [...prev, marker]);
    setProperties((prev) => [...prev, { name: result.name, position }]);
    setSearchResults([]);
    setSearchQuery("");
  };
 
  const handleRemoveLocation = useCallback(
    (index) => {
      const newProperties = [...properties];
      newProperties.splice(index, 1);
      setProperties(newProperties);
      removeMarker(index);
    },
    [properties]
  );
 
  const removeMarker = useCallback(
    (index) => {
      if (index < 0 || index >= markers.length) return;
 
      const marker = markers[index];
      marker.setMap(null);
      const newMarkers = [...markers];
      newMarkers.splice(index, 1);
      setMarkers(newMarkers);
    },
    [markers]
  );
 
  const handleMapClick = (mapProps, map, clickEvent) => {
    const geocoder = new google.maps.Geocoder();
    const latLng = {
      lat: clickEvent.latLng.lat(),
      lng: clickEvent.latLng.lng(),
    };
 
    geocoder.geocode({ location: latLng }, (results, status) => {
      if (status === "OK" && results[0]) {
        const marker = new google.maps.Marker({
          position: latLng,
          map,
          title: results[0].formatted_address,
        });
 
        setMarkers((prev) => [...prev, marker]);
        setProperties((prev) => [
          ...prev,
          { name: results[0].formatted_address, position: latLng },
        ]);
      }
    });
  };
 
  useEffect(() => {
    if (properties.length > 0) {
      setMapCenter(properties[properties.length - 1].position);
    }
  }, [properties]);
 
  return (





<div style={{ display: "flex" }}>
      <div style={{ flex: "1 1 50%", padding: "10px" }}>
        {/* âœ… label for accessibility test */}
        <label htmlFor="searchInput">Enter location</label>
        <input
          id="searchInput"
          type="text"
          value={searchQuery}
          onChange={(e) => setSearchQuery(e.target.value)}
          placeholder="Search location"
        />
        <button onClick={handleSearch}>Search</button>

        

        <ul>
          {searchResults.map((result, index) => (
            <li key={index}>
              {result.name}
              <button onClick={() => handleAddLocation(result)}>Add</button>
            </li>
          ))}
        </ul>

        <h3>Saved Locations</h3>
        <ul>
          {properties.map((prop, index) => (
            <li key={index}>
              {prop.name}
              <button onClick={() => handleRemoveLocation(index)}>Remove</button>
            </li>
          ))}
        </ul>
      </div>

      <div style={{ flex: "1 1 50%", height: "500px" }}>
        <Map
          google={google}
          zoom={5}
          initialCenter={mapCenter}
          onReady={handleMapReady}
          onClick={handleMapClick}
        >
          {properties.map((prop, index) => (
            <LocationMarker
              key={index}
              position={prop.position}
              map={map}
              marker={markers[index]}
              onRemove={() => handleRemoveLocation(index)}
            />
          ))}
        </Map>
      </div>
    </div>



    
  );
};
 
export default GoogleApiWrapper({
  apiKey: "AIzaSyDh0LyUchQyqlcsHgYRO5w7iUV4ttlNdDI",
})(App);

--------------------------------------------------------------------------------------------------------------



<!DOCTYPE html>
<html>
  <head>
    <title>CMS: Article Publishing Interface</title>
    <link
      rel="stylesheet"
      href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.2/css/all.min.css"
      integrity="sha512-z3gLpd7yknf1YoNbCzqRKc4qyor8gaKU1qmn+CShxbuBusANI9QpRohGBreCFkKxLhei6S9CQXFEbbKuqLg0DA=="
      crossorigin="anonymous"
      referrerpolicy="no-referrer"
    />
    <style>
      body {
        background-color: #1e1e2f;
      }

      form {
        display: flex;
        flex-direction: column;
        width: 50%;
        justify-content: center;
        align-items: center;
        border: 1px solid #fff;
        margin: 0 auto;
        padding: 10px;
      }

      div {
        width: 100%;
        display: flex;
        justify-content: center;
        margin: 1rem;
      }

      label {
        width: 20%;
      }

      input[type="text"],
      select,
      textarea {
        width: 80%;
        padding: 8px;
        border: 1px solid #ccc;
      }

      input[type="checkbox"] {
        transform: scale(1.2);
      }

      a:hover {
        color: orange;
      }

      .publish {
        justify-content: start;
        align-items: center;
        gap: 10px;
      }

      .summary,
      .error {
        color: white;
      }

      .error {
        background-color: red;
        flex-direction: column;
      }

      .error p {
        text-align: center;
      }

      .error p::first-letter {
        text-transform: capitalize;
      }

      .articles {
        display: flex;
        flex-direction: column;
        width: 51%;
        justify-content: center;
        align-items: center;
        margin: 0 auto;
      }

      .article {
        display: flex;
        width: 100%;
        flex-direction: column;
        border: 1px solid #fff;
        color: white;
        align-items: center;
        margin-bottom: 10px;
        padding: 10px;
      }

      .delete-icon {
        color: red;
        padding: 10px;
        cursor: pointer;
      }
    </style>
  </head>
  <body>
    <form>
      <h2 style="color: white">CMS: Article Publishing Interface</h2>
      <div>
        <label for="title" style="color: white">Article Title</label>
        <input type="text" id="title" />
      </div>

      <div>
        <label for="content" style="color: white">Article Content</label>
        <textarea id="content" rows="4"></textarea>
      </div>

      <div>
        <label for="category" style="color: white">Category</label>
        <select id="category">
          <option value="Technology">Technology</option>
          <option value="Lifestyle">Lifestyle</option>
          <option value="Business">Business</option>
        </select>
      </div>

      <div class="publish">
        <label for="is_published" style="color: white">Publish</label>
        <input type="checkbox" id="is_published" />
      </div>

      <div>
        <button id="add-article">Submit</button>
      </div>

      <div id="error"></div>
    </form>

    <script type="text/javascript">
      const articles = [];

      const btn = document.getElementById("add-article");
      btn.addEventListener("click", addArticle);

      function addArticle(e) {
        e.preventDefault();
        let errorMessages = [];
        const article = {};

        const title = document.getElementById("title").value.trim();
        const content = document.getElementById("content").value.trim();
        const category = document.getElementById("category").value;
        const isPublished = document.getElementById("is_published").checked;

        const errorDiv = document.getElementById("error");
        errorDiv.innerHTML = "";

        if (!title) errorMessages.push("title is empty ");
        if (!content) errorMessages.push("content is empty ");

        if (errorMessages.length > 0) {
          errorDiv.innerHTML = errorMessages.map(msg => `<p>${msg}</p>`).join("") + "<p></p>";
        } else {
          article.title = title;
          article.content = content;
          article.category = category;
          article.isPublished = isPublished;

          articles.push(article);
          displayArticles(articles);

          document.getElementById("title").value = "";
          document.getElementById("content").value = "";
          document.getElementById("category").value = "Technology";
          document.getElementById("is_published").checked = false;
        }
      }

      function displayArticles(articles) {
        const existingContainer = document.querySelector(".articles");
        if (existingContainer) {
          document.body.removeChild(existingContainer);
        }
        const articlesContainer = document.createElement("div");
        articlesContainer.classList.add("articles");

        articles.forEach((article, index) => {
          const articleDiv = document.createElement("div");
          articleDiv.classList.add("article");

          const title = document.createElement("h3");
          title.textContent = article.title;

          const category = document.createElement("p");
          category.textContent = "Category: " + article.category;

          const status = document.createElement("p");
          status.textContent = "Status: " + (article.isPublished ? "Published" : "Draft");

          const deleteIcon = document.createElement("i");
          deleteIcon.classList.add("fas", "fa-trash-alt", "delete-icon");
          deleteIcon.addEventListener("click", () => {
            articles.splice(index, 1);
            displayArticles(articles);
          });

          articleDiv.appendChild(title);
          articleDiv.appendChild(category);
          articleDiv.appendChild(status);
          articleDiv.appendChild(deleteIcon);
          articlesContainer.appendChild(articleDiv);
        });

        document.body.appendChild(articlesContainer);
      }
    </script>
  </body>
</html>
--------------------------------------------------------------------------------------------------------------

<!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<title>Registration Form</title>
<style>
    body {
      font-family: Arial, sans-serif;
      background-color: #f2f2f2;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 100vh;
    }
 
    .registration-form {
      background-color: white;
      padding: 20px;
      border-radius: 8px;
      width: 300px;
      box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }
 
    .form-group {
      margin-bottom: 15px;
    }
 
    input {
      width: 100%;
      padding: 8px;
      border: 1px solid #ccc;
      border-radius: 4px;
    }
 
    input.error {
      border-color: red;
    }
 
    .error {
      color: red;
      font-size: 12px;
    }
 
    .success-message {
      color: green;
      margin-top: 10px;
      border: 1px solid #a8d5a2;
      background-color: #e6f9e6;
      padding: 10px;
      border-radius: 4px;
      text-align: center;
    }
 
    .submit-button {
      width: 100%;
      padding: 10px;
      background: linear-gradient(to right, #4CAF50, #45A049);
      border: none;
      color: white;
      border-radius: 4px;
      cursor: pointer;
    }
 
    .submit-button:hover {
      background: linear-gradient(to right, #45A049, #4CAF50);
    }
</style>
</head>
<body>
<form class="registration-form" id="registration-form">
<div class="form-group">
<label for="employeeID">Employee ID</label>
<input type="text" id="employeeID" />
<div id="employeeID-error" class="error"></div>
</div>
 
    <div class="form-group">
<label for="email">Email</label>
<input type="email" id="email" />
<div id="email-error" class="error"></div>
</div>
 
    <div class="form-group">
<label for="password">Password</label>
<input type="password" id="password" />
<div id="password-error" class="error"></div>
</div>
 
    <button type="submit" class="submit-button">Register</button>
<div id="success-message" class="success-message" style="display: none;">
      Form submitted successfully!
</div>
</form>
 
  <script>
    document.getElementById("registration-form").addEventListener("submit", function (event) {
      event.preventDefault();
 
      const employeeID = document.getElementById("employeeID");
      const email = document.getElementById("email");
      const password = document.getElementById("password");
 
      const employeeIDValue = employeeID.value.trim();
      const emailValue = email.value.trim();
      const passwordValue = password.value.trim();
 
      const employeeIDError = document.getElementById("employeeID-error");
      const emailError = document.getElementById("email-error");
      const passwordError = document.getElementById("password-error");
      const successMessage = document.getElementById("success-message");
 
      let errorForm = false;
 
      // Reset errors
      employeeIDError.textContent = "";
      emailError.textContent = "";
      passwordError.textContent = "";
      successMessage.style.display = "none";
 
      employeeID.classList.remove("error");
      email.classList.remove("error");
      password.classList.remove("error");
 
      const employeeIDRegex = /^[a-zA-Z0-9]+$/;
      const emailRegex = /^[^@\s]+@[^@\s]+\.[^@\s]+$/;
 
      // Employee ID validation
      if (!employeeIDValue) {
        employeeIDError.textContent = "Employee ID is required.";
        employeeID.classList.add("error");
        errorForm = true;
      } else if (!employeeIDRegex.test(employeeIDValue)) {
        employeeIDError.textContent = "Employee ID can only contain letters and numbers.";
        employeeID.classList.add("error");
        errorForm = true;
      }
 
      // Email validation
      if (!emailValue) {
        emailError.textContent = "Email is required.";
        email.classList.add("error");
        errorForm = true;
      } else if (!emailRegex.test(emailValue)) {
        emailError.textContent = "Please enter a valid email address.";
        email.classList.add("error");
        errorForm = true;
      }
 
      // Password validation
      if (!passwordValue) {
        passwordError.textContent = "Password is required.";
        password.classList.add("error");
        errorForm = true;
      }
 
      // If no errors, show success message
      if (!errorForm) {
        successMessage.style.display = "block";
      }
    });
</script>
</body>
</html>




--------------------------------------------------------------------------------------------------------------


const products = [
  { id: 1, name: "Product 1", price: 10 },
  { id: 2, name: "Product 2", price: 20 },
  { id: 3, name: "Product 3", price: 30 }
];

const shoppingCart = {
  items: [],
  coupon: null,

  addToCart: function(productId, quantity) {
    const product = products.find(p => p.id === productId);
    if (!product) {
      console.log("Product not found!");
      return;
    }
    const existingItem = this.items.find(item => item.product.id === productId);
    if (existingItem) {
      existingItem.quantity += quantity;
    } else {
      this.items.push({ product, quantity });
    }
  },

  viewCart: function() {
    console.log("Cart Contents:");
    if (this.items.length === 0) {
      console.log("Your cart is empty.");
      return;
    }
    this.items.forEach(item => {
      console.log(
        `${item.product.name} - Quantity: ${item.quantity} - Price: $${item.product.price}`
      );
    });
  },

  applyCoupon: function(couponCode) {
    const validCoupons = {
      "DISCOUNT10": 10,
      "DISCOUNT20": 20
    };

    if (validCoupons[couponCode]) {
      this.coupon = couponCode; // Save the discount percentage directly
    } else {
      console.log("Invalid coupon code.");
    }
  },

  calculateTotalAmount: function() {
    let total = 0;
    this.items.forEach(item => {
      total += item.product.price * item.quantity;
    });

    if (this.coupon) {
      const discountAmount = (total * this.coupon) / 100;
      total -= discountAmount;
      // console.log(`Discount of ${this.coupon}% applied: -$${discountAmount.toFixed(2)}`);
    }

    const totalMessage = `Total payable amount: $${total.toFixed(2)}`;
    console.log(totalMessage);
    return total;
  }
};

module.exports = shoppingCart;

--------------------------------------------------------------------------------------------------------------

// Define two arrays: one for names and another for marks
const names: string[] = ["Alice", "Bob", "Charlie", "David"];
const marks: number[] = [85, 92, 78, 90];
 
// Display names and marks using a for loop
for (let i = 0; i < names.length; i++) {
    console.log(`${names[i]}: ${marks[i]}`);
}
 
// Display the average marks
console.log(`\nAverage Marks: ${findAvg(marks)}`);
 
// index.ts
export function findAvg(marks: number[]): number {
    let sum = 0;
    for (let mark of marks) {
        sum += mark;
    }
    const averageMarks = sum / marks.length;
    return averageMarks;
}


--------------------------------------------------------------------------------------------------------------


export class Patient {
  patientID: number;
  name: string;
  medicalCondition: string;
 
  constructor(patientID: number, name: string, medicalCondition: string) {
    this.patientID = patientID;
    this.name = name;
    this.medicalCondition = medicalCondition;
  }
 
  // displayDetails() method to log patient details
  displayDetails(): void {
    console.log(`Patient ID: ${this.patientID}, Name: ${this.name}, Medical Condition: ${this.medicalCondition}`);
  }
 
  // hasCondition() method to check if the patient has a specific condition
  hasCondition(condition: string): boolean {
    if (this.medicalCondition === condition) {
      return true;
    } else {
      return false;
    }
  }
}
 
// Create a new Patient object
const patient1 = new Patient(1, 'John Doe', 'Diabetes');
 
// Call displayDetails and hasCondition methods
patient1.displayDetails();
console.log(patient1.hasCondition('Diabetes'));  // This patient has Diabetes.
console.log(patient1.hasCondition('Cancer'));  // This patient does not have Cancer.
--------------------------------------------------------------------------------------------------------------


// PatientForm.js
import React, { useState } from 'react';
import { useNavigate } from 'react-router-dom';

const PatientForm = () => {
  const [formData, setFormData] = useState({
    name: '',
    dob: '',
    medicalHistory: '',
    currentMedications: '',
  });

  const [errors, setErrors] = useState({});
  const navigate = useNavigate();

  const handleChange = (e) => {
    const { name, value } = e.target;
    setFormData({ ...formData, [name]: value });
    setErrors({ ...errors, [name]: '' });
  };

  const validate = (data) => {
    const errors = {};
    if (!data.name.trim()) errors.name = 'Name is required';
    if (!data.dob) errors.dob = 'Date of Birth is required';
    else if (new Date(data.dob) > new Date()) {
      errors.dob = 'Date of Birth cannot be a future date';
    }
    return errors;
  };

  const handleSubmit = (e) => {
    e.preventDefault();
    const validationErrors = validate(formData);
    if (Object.keys(validationErrors).length > 0) {
      setErrors(validationErrors);
      navigate('/error');
    } else {
      setErrors({});
      navigate('/welcome');
    }
  };

  return (
    <div className="form-container">
      <h1>Patient Registration</h1>
      <form onSubmit={handleSubmit}>
        <div>
          <label htmlFor="name">Name:</label>
          <input type="text" id="name" name="name" value={formData.name} onChange={handleChange} />
          {errors.name && <p>{errors.name}</p>}
        </div>
        <div>
          <label htmlFor="dob">Date of Birth:</label>
          <input type="date" id="dob" name="dob" value={formData.dob} onChange={handleChange} />
          {errors.dob && <p>{errors.dob}</p>}
        </div>
        <div>
          <label htmlFor="medicalHistory">Medical History:</label>
          <textarea id="medicalHistory" name="medicalHistory" value={formData.medicalHistory} onChange={handleChange}></textarea>
        </div>
        <div>
          <label htmlFor="currentMedications">Current Medications:</label>
          <input type="text" id="currentMedications" name="currentMedications" value={formData.currentMedications} onChange={handleChange} />
        </div>
        <button type="submit">Submit</button>
      </form>
    </div>
  );
};

export default PatientForm;


import React from 'react';

const ErrorPage = () => {
  return <h1>Error: Invalid form submission</h1>;
};

export default ErrorPage;



// WelcomePage.js

import React from 'react';

const WelcomePage = () => {
  return <h1>Welcome! Patient registered successfully.</h1>;
};

export default WelcomePage;


--------------------------------------------------------------------------------------------------------------

employee component

import { Component } from '@angular/core';
import { Employee } from '../model/employee.model';

@Component({
  selector: 'app-employee',
  templateUrl: './employee.component.html',
  styleUrls: ['./employee.component.scss']
})
export class EmployeeComponent {
  // Create an employee list here
  employees: Employee[] = [
    { id: 1, name: 'Monisha', position: 'Software Engineer'},
    { id: 2, name: 'Roshna', position: 'Product Manager' },
    { id: 3, name: 'Neha', position: 'UX Designer'},

  ];
}




//employee html

<table>
  <thead>
    <tr>
      <th>ID</th>
      <th>Name</th>
      <th>Position</th>
    </tr>
  </thead>
  <tbody>
    <tr *ngFor="let employee of employees">
      <td>{{ employee.id }}</td>
      <td>{{ employee.name }}</td>
      <td>{{ employee.position }}</td>
    </tr>
  </tbody>
</table>


vote html

<div>
  <!-- Label for the age input field -->
  <label for="age">Enter your Age</label>

  <!-- Input field with two-way data binding to 'userAge' -->
  <input id="age" [(ngModel)]="userAge" type="number" placeholder="Enter your age" />

  <!-- Button to trigger eligibility check -->
  <button (click)="checkEligibility()">Check Eligibility</button>

  <!-- Paragraph to display the eligibility message -->
  <p *ngIf="eligibilityMessage">{{ eligibilityMessage }}</p>
</div>
 


--------------------------------------------------------------------------------------------------------------


import { ComponentFixture, TestBed } from '@angular/core/testing';
import { EmployeeComponent } from '../app/employee/employee.component';
import { Employee } from '../app/model/employee.model';
import { VoteComponent } from '../app/vote/vote.component';
import { FormsModule } from '@angular/forms';

describe('AngularDirective', () => {
  let employeeComponent: EmployeeComponent;
  let employeeFixture: ComponentFixture<EmployeeComponent>;
  let voteComponent: VoteComponent;
  let voteFixture: ComponentFixture<VoteComponent>;

  beforeEach(async () => {
    await TestBed.configureTestingModule({
      declarations: [EmployeeComponent, VoteComponent],
      imports: [FormsModule] 
    }).compileComponents();

    employeeFixture = TestBed.createComponent(EmployeeComponent);
    employeeComponent = employeeFixture.componentInstance;
    employeeFixture.detectChanges();

    voteFixture = TestBed.createComponent(VoteComponent);
    voteComponent = voteFixture.componentInstance;
    voteFixture.detectChanges();
  });

  it('should display employees correctly using ngFor', () => {
    // Arrange - set the employees data
    // const testData: Employee[] = [
    //   new Employee(1, 'John Doe', 'Software Developer'),
    //   new Employee(2, 'Jane Smith', 'Product Manager'),
    //   new Employee(3, 'Bob Johnson', 'QA Engineer'),
    // ];
    // employeeComponent.employees = testData;

    // // Act - trigger change detection
    // employeeFixture.detectChanges();

    // // Assert - check if the employees are displayed correctly
    // const tableRows = employeeFixture.nativeElement.querySelectorAll('tbody tr');

    // expect(tableRows.length).toBe(testData.length);

    // for (let i = 0; i < testData.length; i++) {
    //   const rowData = testData[i];
    //   const rowElement = tableRows[i];

    //   // Check each cell in the row
    //   expect(rowElement.querySelector('td:nth-child(1)').textContent).toContain(rowData.id);
    //   expect(rowElement.querySelector('td:nth-child(2)').textContent).toContain(rowData.name);
    //   expect(rowElement.querySelector('td:nth-child(3)').textContent).toContain(rowData.position);
    // }
  });

  it('should set eligibilityMessage when userAge is below 18',() => {
  });
  it('should set eligibilityMessage when userAge is 18 or above', () => {
    // Arrange
  //   voteComponent.userAge = 20;

  //   // Act
  //   voteComponent.checkEligibility();
  //   voteFixture.detectChanges();

  //   // Assert
  //   expect(voteComponent.eligibilityMessage).toEqual('Eligible to vote');
  // });

  // it('should set eligibilityMessage when userAge is below 18', () => {
  //   // Arrange
  //   voteComponent.userAge = 15;

  //   // Act
  //   voteComponent.checkEligibility();
  //   voteFixture.detectChanges();

  //   // Assert
  //   expect(voteComponent.eligibilityMessage).toEqual('Not eligible to vote');
  });


  it('should update eligibilityMessage when userAge changes', () => {
    // Arrange
  //   voteComponent.userAge = 16;

  //   // Act
  //   voteComponent.checkEligibility();
  //   voteFixture.detectChanges();

  //   // Assert
  //   expect(voteComponent.eligibilityMessage).toEqual('Not eligible to vote');

  //   // Act - update userAge
  //   voteComponent.userAge = 19;
  //   voteComponent.checkEligibility();
  //   voteFixture.detectChanges();

  //   // Assert
  //   expect(voteComponent.eligibilityMessage).toEqual('Eligible to vote');
  });
});

 


--------------------------------------------------------------------------------------------------------------

-------------------------------------------------------------------------------------------------
import { Injectable } from '@angular/core';
import { ActivatedRouteSnapshot, CanActivate, Router, RouterStateSnapshot, UrlTree } from '@angular/router';
import { AuthService } from './auth.service';
import { Observable } from 'rxjs';
 
@Injectable({
  providedIn: 'root'
})
export class AuthGuard implements CanActivate {
 
  constructor(private authService: AuthService, private router: Router) {
   }
 
   canActivate(route:ActivatedRouteSnapshot,state:RouterStateSnapshot):boolean{
 
 
    
    const expectedRole=route.data['role'];
    if(!this.authService.isLoggedIn){
      this.router.navigate(['/login']);
      return false;
    }
    if(expectedRole === 'admin' && !this.authService.isAdmin){
      this.router.navigate(['/unauthorized']);
      return false;
    }
    if(expectedRole === 'user' && this.authService.isAdmin){
      this.router.navigate(['/unauthorized']);
      return false;
    }

    return true;
  }
}
 
 
----
import { Injectable } from '@angular/core';
 
@Injectable({
  providedIn: 'root'
})
export class AuthService {
  private readonly AUTH_TOKEN_KEY = 'auth_token';
  private readonly IS_ADMIN_KEY = 'is_admin';
  private readonly USERNAME_KEY='username';
 
  constructor() {
   //complete missing code here
 
  }
 
  get isLoggedIn(): boolean {
   //complete missing code here
   return localStorage.getItem(this.AUTH_TOKEN_KEY)==='true';
  }
 
  set isLoggedIn(value: boolean) {
  //complete missing code here
    localStorage.setItem(this.AUTH_TOKEN_KEY,value.toString());
  }
 
 
  get isAdmin(): boolean {
//complete missing code here
return localStorage.getItem(this.IS_ADMIN_KEY)==='true';
  }
 
  set SetUser(value: string) {
  //complete missing code here
  localStorage.setItem(this.USERNAME_KEY,value);
  localStorage.setItem(this.AUTH_TOKEN_KEY,'true');
  const is_admin=value==='is_admin';
  localStorage.setItem(this.IS_ADMIN_KEY,is_admin.toString());
 
  // localStorage.setItem(this.USERNAME_KEY,!is_admin.)
  }
 
  login(username: string, password: string): boolean {
    // Implement authentication logic
   //complete missing code here
   if((username === 'admin' && password === 'admin') || (username === 'user' && password === 'user')){
    this.isLoggedIn=true;
    localStorage.setItem(this.IS_ADMIN_KEY,(username ==='admin').toString());
    this.SetUser=username;
    return true;
   }
   return false;
  }
 
  logout(): void {
//complete missing code here
localStorage.removeItem(this.AUTH_TOKEN_KEY);
 
localStorage.removeItem(this.IS_ADMIN_KEY);
localStorage.removeItem(this.USERNAME_KEY);  
}
}
 
--
import { CommonModule } from '@angular/common';
import { Component, OnInit } from '@angular/core';
import { AbstractControl, FormBuilder, FormGroup, FormsModule, Validators } from '@angular/forms';
import { Router } from '@angular/router';
import { AuthService } from '../services/auth.service';
@Component({
  selector: 'app-login',
  templateUrl: './login.component.html',
  styleUrl: './login.component.scss'
})
export class LoginComponent implements OnInit{
  formModel:any={}
  itemForm: FormGroup;
  loginFailed:boolean=false;
  constructor(private authService: AuthService,private formBuilder: FormBuilder, private router:Router) 
    {
      this.itemForm=this.formBuilder.group({
        username:['',Validators.required],
        password:['',Validators.required]
      });
 
   }
  ngOnInit(): void {
  }
  onRegister()
  {
    if(this.itemForm.valid)
    {
      const username=this.itemForm.value.username;
      const password=this.itemForm.value.password;
      const success=this.authService.login(username,password);
      if(success){
        this.loginFailed=false;
        if(this.authService.isAdmin){
          this.router.navigate(['/admin']);
        }
        else{
          this.router.navigate(['/user']);
        }
      }
      else{
        this.itemForm.markAllAsTouched();
      }
    }
    else{
      this.itemForm.markAllAsTouched();
    }
  }
}
 
--------------------------------------------------------------------------------------------
 
 <!DOCTYPE html>
<html lang="en">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
<title>Leave Application Form</title>
<style>
    body {
      font-family: Arial, sans-serif;
      padding: 20px;
      max-width: 600px;
      margin: auto;
      background-color: #f4f4f4;
    }
    form {
      background: white;
      padding: 20px;
      border-radius: 10px;
      box-shadow: 0 0 10px rgba(0,0,0,0.1);
    }
    input, textarea {
      width: 100%;
      padding: 8px;
      margin-top: 8px;
      margin-bottom: 20px;
      border-radius: 5px;
      border: 1px solid #ccc;
    }
    label {
      font-weight: bold;
    }
    .error {
      color: red;
      margin-bottom: 10px;
    }
    .success {
      color: green;
    }
</style>
</head>
<body>
 
<h2>Corporate Office Leave Application</h2>
 
<form id="itemForm">
<div class="error" id="errorMsg"></div>
<label for="EmployeeID">Employee ID</label>
<input type="text" id="EmployeeID" name="EmployeeID" required>
 
  <label for="StartDate">Start Date</label>
<input type="date" id="StartDate" name="StartDate" required>
 
  <label for="EndDate">End Date</label>
<input type="date" id="EndDate" name="EndDate" required>
 
  <label for="ReasonForLeave">Reason for Leave</label>
<textarea id="ReasonForLeave" name="ReasonForLeave" rows="4" required></textarea>
 
  <button type="submit">Submit</button>
</form>
 
<div id="result"></div>
 
<script>
  const form = document.getElementById('itemForm');
  const errorMsg = document.getElementById('errorMsg');
  const result = document.getElementById('result');
 
  function checkOutDateValidator(start, end) {
    return new Date(end) >= new Date(start);
  }
 
  form.addEventListener('submit', function(e) {
    e.preventDefault();
    errorMsg.textContent = '';
    result.textContent = '';
 
    const EmployeeID = form.EmployeeID.value.trim();
    const StartDate = form.StartDate.value;
    const EndDate = form.EndDate.value;
    const ReasonForLeave = form.ReasonForLeave.value.trim();
 
    if (!EmployeeID || !StartDate || !EndDate || !ReasonForLeave) {
      errorMsg.textContent = 'All fields are required.';
      navigateToErrorPage();
      return;
    }
 
    const today = new Date().toISOString().split('T')[0];
    if (StartDate < today) {
      errorMsg.textContent = 'Start date cannot be in the past.';
      navigateToErrorPage();
      return;
    }
 
    if (!checkOutDateValidator(StartDate, EndDate)) {
      errorMsg.textContent = 'End date must be after start date.';
      navigateToErrorPage();
      return;
    }
 
    navigateToWelcomePage();
  });
 
  function navigateToWelcomePage() {
    result.innerHTML = '<p class="success">Form submitted successfully! Navigating to Welcome Page...</p>';
    // Simulate routing
    setTimeout(() => window.location.href = '/welcome.html', 2000); // simulate navigation
  }
 
  function navigateToErrorPage() {
    result.innerHTML = '<p class="error">Validation failed. Navigating to Error Page...</p>';
    // Simulate routing
    setTimeout(() => window.location.href = '/error.html', 2000);
  }
</script>
 
</body>
</html>



--------------------------------------------------------------------------------------------------------------

// src/app/pages/home/home.component.ts
import { Component } from '@angular/core';
import { FormBuilder, FormGroup, Validators } from '@angular/forms';
import { Router } from '@angular/router';
 
@Component({
  selector: 'app-home',
  templateUrl: './home.component.html',
  styleUrls: ['./home.component.scss']
})
export class HomeComponent {
  itemForm: FormGroup;
 
  constructor(private fb: FormBuilder, private router: Router) {
    this.itemForm = this.fb.group({
      EmployeeID: ['', Validators.required],
      StartDate: ['', Validators.required],
      EndDate: ['', [Validators.required]],
      ReasonForLeave: ['', Validators.required],
    }, { validators: this.checkOutDateValidator });
  }
 
  checkOutDateValidator(form: FormGroup) {
    const start = new Date(form.get('StartDate')?.value);
    const end = new Date(form.get('EndDate')?.value);
    return end >= start ? null : { dateInvalid: true };
  }
 
  onSubmit() {
    if (this.itemForm.invalid) {
      this.router.navigate(['/error']);
      return;
    }
 
    const startDate = new Date(this.itemForm.value.StartDate);
    const today = new Date();
    today.setHours(0, 0, 0, 0); // normalize to avoid time diff issues
 
    if (startDate < today) {
      this.router.navigate(['/error']);
      return;
    }
 
    this.router.navigate(['/welcome']);
  }
}

<!-- src/app/pages/home/home.component.html -->
<div class="form-container">
<h2>Leave Application Form</h2>
 
  <form [formGroup]="itemForm" (ngSubmit)="onSubmit()">
<label for="EmployeeID">Employee ID:</label>
<input type="text" formControlName="EmployeeID" id="EmployeeID" />
 
    <label for="StartDate">Start Date:</label>
<input type="date" formControlName="StartDate" id="StartDate" />
 
    <label for="EndDate">End Date:</label>
<input type="date" formControlName="EndDate" id="EndDate" />
 
    <label for="ReasonForLeave">Reason for Leave:</label>
<textarea formControlName="ReasonForLeave" id="ReasonForLeave"></textarea>
 
    <button type="submit">Submit</button>
 
    <div *ngIf="itemForm.errors?.dateInvalid" style="color: red;">
      End date must be after start date.
</div>
</form>
</div>



--------------------------------------------------------------------------------------------------------------


package com.hotelbooking.entity;

public class Booking {
    
    private int id;
    private String guestName;
    private int roomNumber;

    // Constructors
    public Booking() {}
    public Booking( String guestName, int roomNumber) {
        this.id = 0;
        this.guestName = guestName;
        this.roomNumber = roomNumber;
    }

    // Getters and Setters
    public int getId() { return id; }
    public void setId(int id) { this.id = id; }

    public String getGuestName() { return guestName; }
    public void setGuestName(String guestName) { this.guestName = guestName; }

    public int getRoomNumber() { return roomNumber; }
    public void setRoomNumber(int roomNumber) { this.roomNumber = roomNumber; }
}




package com.hotelbooking.service;
import com.hotelbooking.entity.Booking;
import org.springframework.stereotype.Service;

import java.util.ArrayList;
import java.util.List;
import java.util.Optional;

@Service
public class BookingService {

    private static int counter = 1;
    private final List<Booking> bookingList = new ArrayList<>();

    public Booking addBooking(Booking booking) {
        booking.setId(counter++); // Set unique ID
        bookingList.add(booking);
        return booking;
    }

    public Optional<Booking> getBookingById(int id) {
        return bookingList.stream()
                .filter(booking -> booking.getId() == id)
                .findFirst();
    }
}



package com.hotelbooking.controller;
import com.hotelbooking.entity.Booking;
import com.hotelbooking.service.BookingService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/bookings")
public class BookingController {

@Autowired
    private  BookingService bookingService;

    

    @PostMapping
    public ResponseEntity<Booking> addBooking(@RequestBody Booking booking) {
// booking.setId();

return ResponseEntity.ok(bookingService.addBooking(booking));
    }

    @GetMapping("/{id}")
    public Booking getBookingById(@PathVariable int id) {
        return bookingService.getBookingById(id).get();
    }

}





--------------------------------------------------------------------------------------------------------------

package com.example.securitydemo;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class SecurityDemoApplication {
    public static void main(String[] args) {
        SpringApplication.run(SecurityDemoApplication.class, args);
    }
}

// User Entity
import jakarta.persistence.*;
import lombok.*;
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import java.util.Collection;
import java.util.List;

@Entity
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "users")
public class User implements UserDetails {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(unique = true, nullable = false)
    private String username;

    private String password;
    private String roles;

    @Override
    public Collection<? extends GrantedAuthority> getAuthorities() {
        return List.of(new SimpleGrantedAuthority("ROLE_" + roles));
    }

    @Override
    public boolean isAccountNonExpired() { return true; }

    @Override
    public boolean isAccountNonLocked() { return true; }

    @Override
    public boolean isCredentialsNonExpired() { return true; }

    @Override
    public boolean isEnabled() { return true; }
}

// User Repository
import org.springframework.data.jpa.repository.JpaRepository;
import java.util.Optional;

public interface UserRepository extends JpaRepository<User, Long> {
    Optional<User> findByUsername(String username);
}

// Custom User Details Service
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;

@Service
public class CustomUserDetailsService implements UserDetailsService {
    private final UserRepository userRepository;

    public CustomUserDetailsService(UserRepository userRepository) {
        this.userRepository = userRepository;
    }

    @Override
    public User loadUserByUsername(String username) throws UsernameNotFoundException {
        return userRepository.findByUsername(username)
                .orElseThrow(() -> new UsernameNotFoundException("User not found"));
    }
}

// Security Configuration
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.provisioning.InMemoryUserDetailsManager;
import org.springframework.security.core.userdetails.User;
import org.springframework.security.core.userdetails.UserDetails;

@Configuration
@EnableWebSecurity
public class SecurityConfig {
    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }

    @Bean
    public InMemoryUserDetailsManager inMemoryUserDetailsManager() {
        UserDetails user = User.withUsername("user")
                .password(passwordEncoder().encode("user123"))
                .roles("USER")
                .build();

        UserDetails admin = User.withUsername("admin")
                .password(passwordEncoder().encode("admin123"))
                .roles("ADMIN")
                .build();

        return new InMemoryUserDetailsManager(user, admin);
    }

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http
                .authorizeHttpRequests(auth -> auth
                        .requestMatchers("/admin").hasRole("ADMIN")
                        .anyRequest().authenticated())
                .httpBasic()
                .and()
                .csrf().disable();
        return http.build();
    }
}

// Controller
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
@RequestMapping("/")
public class HomeController {
    @GetMapping
    public String home() {
        return "Welcome";
    }

    @GetMapping("/admin")
    public String admin() {
        return "Welcome Admin";
    }
}


----------------------------------------------------------------------------------------------------------------------------------------------------


package com.wecp.library.entity;

import jakarta.persistence.*;
import lombok.*;
import java.time.LocalDateTime;

@Entity
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "users")
public class User {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private String username;
    private String password;
    private boolean subscribed;
}

@Entity
@Getter
@Setter
@NoArgsConstructor
@AllArgsConstructor
@Table(name = "issues")
public class Issue {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;
    private Long userId;
    private Long bookId;
    private LocalDateTime issuedAt;
}

package com.wecp.library.repository;

import com.wecp.library.entity.User;
import org.springframework.data.jpa.repository.JpaRepository;
import java.util.Optional;

public interface UserRepository extends JpaRepository<User, Long> {
    Optional<User> findByUsername(String username);
}

package com.wecp.library.repository;

import com.wecp.library.entity.Issue;
import org.springframework.data.jpa.repository.JpaRepository;

public interface IssueRepository extends JpaRepository<Issue, Long> {}

package com.wecp.library.service;

import com.wecp.library.entity.User;
import com.wecp.library.repository.UserRepository;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.stereotype.Service;

@Service
public class UserService {
    private final UserRepository userRepository;
    private final PasswordEncoder passwordEncoder;

    public UserService(UserRepository userRepository, PasswordEncoder passwordEncoder) {
        this.userRepository = userRepository;
        this.passwordEncoder = passwordEncoder;
    }

    public User createUser(User user) {
        user.setPassword(passwordEncoder.encode(user.getPassword()));
        user.setSubscribed(false);
        return userRepository.save(user);
    }

    public User renewSubscription(Long userId) {
        User user = userRepository.findById(userId).orElseThrow(() -> new RuntimeException("User not found"));
        user.setSubscribed(true);
        return userRepository.save(user);
    }
}

package com.wecp.library.controller;

import com.wecp.library.entity.Issue;
import com.wecp.library.entity.User;
import com.wecp.library.service.IssueService;
import com.wecp.library.service.UserService;
import org.springframework.http.ResponseEntity;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/v1")
public class LibraryController {
    private final UserService userService;
    private final IssueService issueService;

    public LibraryController(UserService userService, IssueService issueService) {
        this.userService = userService;
        this.issueService = issueService;
    }

    @PostMapping("/create-user")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<User> createUser(@RequestBody User user) {
        return ResponseEntity.ok(userService.createUser(user));
    }

    @PostMapping("/issue-book")
    public ResponseEntity<Issue> issueBook(@RequestParam Long userId, @RequestParam Long bookId) {
        return ResponseEntity.ok(issueService.issueBook(userId, bookId));
    }

    @GetMapping("/renew-user-subscription/{id}")
    @PreAuthorize("hasRole('ADMIN')")
    public ResponseEntity<User> renewSubscription(@PathVariable Long id) {
        return ResponseEntity.ok(userService.renewSubscription(id));
    }
}

package com.wecp.library.security;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;
import org.springframework.security.web.SecurityFilterChain;

@Configuration
@EnableWebSecurity
public class WebSecurityConfigurer {

    @Bean
    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception {
        http.csrf().disable()
            .authorizeHttpRequests(auth -> auth
                .requestMatchers("/api/v1/issue-book").permitAll()
                .requestMatchers("/api/v1/create-user", "/api/v1/renew-user-subscription/**").authenticated()
                .anyRequest().authenticated()
            )
            .formLogin()
            .and()
            .httpBasic();

        return http.build();
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
}



----------------------------------------------------------------------------------------------------------------------------------------------------


package com.fcs.wellbeing;

import jakarta.persistence.*;
import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Service;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@SpringBootApplication
public class EmployeeWellbeingApplication {
    public static void main(String[] args) {
        SpringApplication.run(EmployeeWellbeingApplication.class, args);
    }
}

@Entity
@Table(name = "employees")
class Employee {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long employeeId;
    private String fullName;
    private String dateOfBirth;
    private String email;
    private String healthStatus;

    @OneToMany(mappedBy = "employee", cascade = CascadeType.ALL, orphanRemoval = true)
    private List<Program> programs;

    // Getters and Setters
}

@Entity
@Table(name = "programs")
class Program {
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long programId;
    private String programName;
    private String programDescription;
    private String startDate;
    private String endDate;

    @ManyToOne
    @JoinColumn(name = "employee_id", nullable = false)
    private Employee employee;

    // Getters and Setters
}

interface EmployeeRepository extends JpaRepository<Employee, Long> {}

interface ProgramRepository extends JpaRepository<Program, Long> {}

@Service
class EmployeeService {
    private final EmployeeRepository employeeRepository;

    public EmployeeService(EmployeeRepository employeeRepository) {
        this.employeeRepository = employeeRepository;
    }

    public Employee registerEmployee(Employee employee) {
        return employeeRepository.save(employee);
    }

    public void deleteEmployee(Long employeeId) {
        employeeRepository.deleteById(employeeId);
    }

    public List<Employee> getAllEmployees() {
        return employeeRepository.findAll();
    }
}

@Service
class ProgramService {
    private final ProgramRepository programRepository;

    public ProgramService(ProgramRepository programRepository) {
        this.programRepository = programRepository;
    }

    public Program createProgram(Program program) {
        return programRepository.save(program);
    }

    public List<Program> getAllPrograms() {
        return programRepository.findAll();
    }
}

@RestController
@RequestMapping("/employees")
class EmployeeController {
    private final EmployeeService employeeService;

    public EmployeeController(EmployeeService employeeService) {
        this.employeeService = employeeService;
    }

    @PostMapping
    public Employee registerEmployee(@RequestBody Employee employee) {
        return employeeService.registerEmployee(employee);
    }

    @DeleteMapping("/{employeeId}")
    public void deleteEmployee(@PathVariable Long employeeId) {
        employeeService.deleteEmployee(employeeId);
    }

    @GetMapping
    public List<Employee> getAllEmployees() {
        return employeeService.getAllEmployees();
    }
}

@RestController
@RequestMapping("/programs")
class ProgramController {
    private final ProgramService programService;

    public ProgramController(ProgramService programService) {
        this.programService = programService;
    }

    @PostMapping
    public Program createProgram(@RequestBody Program program) {
        return programService.createProgram(program);
    }

    @GetMapping
    public List<Program> getAllPrograms() {
        return programService.getAllPrograms();
    }
}

----------------------------------------------------------------------------------------------------------------------------------------------------


package com.site.spring.controller;

import com.site.spring.model.Student;
import com.site.spring.service.StudentService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/api/v1/students")
public class StudentController {

    @Autowired
    private StudentService studentService;

    @GetMapping
    public List<Student> getAllStudents() {
        return studentService.getAllStudents();
    }

    @PostMapping
    public ResponseEntity<String> addStudent(@RequestBody Student student) {
        studentService.addStudent(student);
        return ResponseEntity.ok("Student added successfully");
    }

    @GetMapping("/{id}")
    public ResponseEntity<Student> getStudentById(@PathVariable int id) {
        Student student = studentService.getStudentById(id);
        return student != null ? ResponseEntity.ok(student) : ResponseEntity.notFound().build();
    }

    @PutMapping("/{id}")
    public ResponseEntity<String> updateStudent(@PathVariable int id, @RequestBody Student student) {
        boolean updated = studentService.updateStudent(id, student);
        return updated ? ResponseEntity.ok("Student updated successfully") : ResponseEntity.notFound().build();
    }

    @DeleteMapping("/{id}")
    public ResponseEntity<String> deleteStudent(@PathVariable int id) {
        boolean deleted = studentService.deleteStudent(id);
        return deleted ? ResponseEntity.ok("Student deleted successfully") : ResponseEntity.notFound().build();
    }
}

package com.student.api.controller;

import com.site.spring.model.Student;
import org.springframework.jdbc.core.RowMapper;

import java.sql.ResultSet;
import java.sql.SQLException;

public class StudentRowMapper implements RowMapper<Student> {
    @Override
    public Student mapRow(ResultSet rs, int rowNum) throws SQLException {
        Student student = new Student();
        student.setId(rs.getInt("id"));
        student.setName(rs.getString("name"));
        return student;
    }
}

package com.site.spring.model;

public class Student {
    private int id;
    private String name;

    public int getId() { return id; }
    public void setId(int id) { this.id = id; }

    public String getName() { return name; }
    public void setName(String name) { this.name = name; }
}

package com.site.spring.service;

import com.site.spring.model.Student;
import com.site.spring.repository.StudentRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class StudentService {

    @Autowired
    private StudentRepository studentRepository;

    public List<Student> getAllStudents() {
        return studentRepository.getAllStudents();
    }

    public void addStudent(Student student) {
        studentRepository.addStudent(student);
    }

    public Student getStudentById(int id) {
        return studentRepository.getStudentById(id);
    }

    public boolean updateStudent(int id, Student student) {
        return studentRepository.updateStudent(id, student);
    }

    public boolean deleteStudent(int id) {
        return studentRepository.deleteStudent(id);
    }
}

package com.site.spring.repository;

import com.site.spring.model.Student;
import com.student.api.controller.StudentRowMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.stereotype.Repository;

import java.util.List;

@Repository
public class StudentRepository {

    @Autowired
    private JdbcTemplate jdbcTemplate;

    public List<Student> getAllStudents() {
        String sql = "SELECT * FROM students";
        return jdbcTemplate.query(sql, new StudentRowMapper());
    }

    public void addStudent(Student student) {
        String sql = "INSERT INTO students (id, name) VALUES (?, ?)";
        jdbcTemplate.update(sql, student.getId(), student.getName());
    }

    public Student getStudentById(int id) {
        String sql = "SELECT * FROM students WHERE id = ?";
        return jdbcTemplate.queryForObject(sql, new StudentRowMapper(), id);
    }

    public boolean updateStudent(int id, Student student) {
        String sql = "UPDATE students SET name = ? WHERE id = ?";
        return jdbcTemplate.update(sql, student.getName(), id) > 0;
    }

    public boolean deleteStudent(int id) {
        String sql = "DELETE FROM students WHERE id = ?";
        return jdbcTemplate.update(sql, id) > 0;
    }
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------

// File: LibraryController.java
package com.wecp.library.controller;

import com.wecp.library.controller.exception.UserNotSubscribedException;
import com.wecp.library.domain.Issue;
import com.wecp.library.domain.User;
import com.wecp.library.repository.IssueRepository;
import com.wecp.library.repository.UserRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import java.util.Optional;

@RestController
@RequestMapping("/api/v1")
public class LibraryController {

    @Autowired
    private UserRepository userRepo;

    @Autowired
    private IssueRepository issueRepo;

    @PostMapping("/issue-book")
    public ResponseEntity<Issue> issueBook(@RequestBody Issue issue) {
        Optional<User> userOpt = userRepo.findById(issue.getUser().getId());
        if (userOpt.isPresent() && userOpt.get().getSubscribed()) {
            Issue savedIssue = issueRepo.save(issue);
            return ResponseEntity.ok(savedIssue);
        } else {
            throw new UserNotSubscribedException("User subscription has expired");
        }
    }

    @PostMapping("/create-user")
    public ResponseEntity<User> createUser(@RequestBody User user) {
        User savedUser = userRepo.save(user);
        return ResponseEntity.ok(savedUser);
    }

    @GetMapping("/renew-user-subscription/{id}")
    public ResponseEntity<User> renewUserSubscription(@PathVariable Long id) {
        Optional<User> userOpt = userRepo.findById(id);
        if (userOpt.isPresent()) {
            User user = userOpt.get();
            user.setSubscribed(true);
            userRepo.save(user);
            return ResponseEntity.ok(user);
        } else {
            return ResponseEntity.noContent().build();
        }
    }
}

// File: WebSecurityConfigurer.java
package com.wecp.library.security;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.security.config.annotation.web.builders.HttpSecurity;
import org.springframework.security.config.annotation.web.configuration.WebSecurityConfigurerAdapter;
import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;
import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;
import org.springframework.security.crypto.password.PasswordEncoder;

@Configuration
@EnableWebSecurity
public class WebSecurityConfigurer extends WebSecurityConfigurerAdapter {

    @Override
    protected void configure(HttpSecurity http) throws Exception {
        http
            .csrf().disable()
            .authorizeRequests()
            .antMatchers("/api/v1/issue-book").permitAll()
            .antMatchers("/api/v1/create-user", "/api/v1/renew-user-subscription/**").authenticated()
            .anyRequest().authenticated()
            .and()
            .httpBasic();
    }

    @Bean
    public PasswordEncoder passwordEncoder() {
        return new BCryptPasswordEncoder();
    }
}

// File: UserRepository.java
package com.wecp.library.repository;

import com.wecp.library.domain.User;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface UserRepository extends JpaRepository<User, Long> {
}

// File: IssueRepository.java
package com.wecp.library.repository;

import com.wecp.library.domain.Issue;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface IssueRepository extends JpaRepository<Issue, Long> {
}

// File: User.java
package com.wecp.library.domain;

import javax.persistence.*;

@Entity
public class User {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String username;
    private String password;
    private Boolean subscribed;

    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }

    public String getUsername() { return username; }
    public void setUsername(String username) { this.username = username; }

    public String getPassword() { return password; }
    public void setPassword(String password) { this.password = password; }

    public Boolean getSubscribed() { return subscribed; }
    public void setSubscribed(Boolean subscribed) { this.subscribed = subscribed; }
}

// File: Issue.java
package com.wecp.library.domain;

import javax.persistence.*;

@Entity
public class Issue {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String bookName;

    @ManyToOne
    private User user;

    public Long getId() { return id; }
    public void setId(Long id) { this.id = id; }

    public String getBookName() { return bookName; }
    public void setBookName(String bookName) { this.bookName = bookName; }

    public User getUser() { return user; }
    public void setUser(User user) { this.user = user; }
}

// File: UserNotSubscribedException.java
package com.wecp.library.controller.exception;

public class UserNotSubscribedException extends RuntimeException {
    public UserNotSubscribedException(String message) {
        super(message);
    }
}
# File: application.properties
spring.datasource.url=jdbc:mysql://localhost:3306/library_db
spring.datasource.username=root
spring.datasource.password=your_password
spring.jpa.hibernate.ddl-auto=update
spring.jpa.show-sql=true
spring.security.user.name=admin
spring.security.user.password=admin123


----------------------------------------------------------------------------------------------------------------------------------------------------


package com.ust.entity;


import com.fasterxml.jackson.annotation.JsonIgnore;

import jakarta.persistence.*;
import java.util.ArrayList;
import java.util.List;

@Entity
public class Policy {

   // implement entity
   @Id
   @GeneratedValue(strategy = GenerationType.IDENTITY)
   private Long policyId;

   @Column(unique = true)
   private String policyNumber;

   private String type;

   private double coverageAmount;

   private double premium;

   private String holderName;

   private String holderAddress;

   private String holderContactNumber;

   private String holderEmail;

   @OneToMany(mappedBy = "policy", cascade = CascadeType.ALL)
   @JsonIgnore(value = true)
   private List<Claim> claims = new ArrayList<>();

   public Policy() {
   }

   public Policy(String policyNumber, String type, double coverageAmount, double premium, String holderName,
         String holderAddress, String holderContactNumber, String holderEmail, List<Claim> claims) {
      this.policyNumber = policyNumber;
      this.type = type;
      this.coverageAmount = coverageAmount;
      this.premium = premium;
      this.holderName = holderName;
      this.holderAddress = holderAddress;
      this.holderContactNumber = holderContactNumber;
      this.holderEmail = holderEmail;
   }

   public Policy(Long policyId, String policyNumber, String type, double coverageAmount, double premium,
         String holderName, String holderAddress, String holderContactNumber, String holderEmail, List<Claim> claims) {
      this.policyId = policyId;
      this.policyNumber = policyNumber;
      this.type = type;
      this.coverageAmount = coverageAmount;
      this.premium = premium;
      this.holderName = holderName;
      this.holderAddress = holderAddress;
      this.holderContactNumber = holderContactNumber;
      this.holderEmail = holderEmail;
   }

   public Long getPolicyId() {
      return policyId;
   }

   public void setPolicyId(Long policyId) {
      this.policyId = policyId;
   }

   public String getPolicyNumber() {
      return policyNumber;
   }

   public void setPolicyNumber(String policyNumber) {
      this.policyNumber = policyNumber;
   }

   public String getType() {
      return type;
   }

   public void setType(String type) {
      this.type = type;
   }

   public double getCoverageAmount() {
      return coverageAmount;
   }

   public void setCoverageAmount(double coverageAmount) {
      this.coverageAmount = coverageAmount;
   }

   public double getPremium() {
      return premium;
   }

   public void setPremium(double premium) {
      this.premium = premium;
   }

   public String getHolderName() {
      return holderName;
   }

   public void setHolderName(String holderName) {
      this.holderName = holderName;
   }

   public String getHolderAddress() {
      return holderAddress;
   }

   public void setHolderAddress(String holderAddress) {
      this.holderAddress = holderAddress;
   }

   public String getHolderContactNumber() {
      return holderContactNumber;
   }

   public void setHolderContactNumber(String holderContactNumber) {
      this.holderContactNumber = holderContactNumber;
   }

   public String getHolderEmail() {
      return holderEmail;
   }

   public void setHolderEmail(String holderEmail) {
      this.holderEmail = holderEmail;
   }

   public List<Claim> getClaims() {
      return claims;
   }

   public void setClaims(List<Claim> claims) {
      this.claims = claims;
   }

   
}

package com.ust.entity;


import jakarta.persistence.*;


import java.util.Date;

@Entity
public class Claim {
    // implement entity
    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long claimId;

    @Column(unique = true)
    private String claimNumber;

    private Date claimDate;
    private double claimAmount;
    private String description;

    @ManyToOne
    @JoinColumn(name = "policy_id")
    private Policy policy;

    public Claim() {
    }

    public Claim(String claimNumber, Date claimDate, double claimAmount, String description, Policy policy) {
        this.claimNumber = claimNumber;
        this.claimDate = claimDate;
        this.claimAmount = claimAmount;
        this.description = description;
        this.policy = policy;
    }

    public Claim(Long claimId, String claimNumber, Date claimDate, double claimAmount, String description,
            Policy policy) {
        this.claimId = claimId;
        this.claimNumber = claimNumber;
        this.claimDate = claimDate;
        this.claimAmount = claimAmount;
        this.description = description;
        this.policy = policy;
    }

    public Long getClaimId() {
        return claimId;
    }

    public void setClaimId(Long claimId) {
        this.claimId = claimId;
    }

    public String getClaimNumber() {
        return claimNumber;
    }

    public void setClaimNumber(String claimNumber) {
        this.claimNumber = claimNumber;
    }

    public Date getClaimDate() {
        return claimDate;
    }

    public void setClaimDate(Date claimDate) {
        this.claimDate = claimDate;
    }

    public double getClaimAmount() {
        return claimAmount;
    }

    public void setClaimAmount(double claimAmount) {
        this.claimAmount = claimAmount;
    }

    public String getDescription() {
        return description;
    }

    public void setDescription(String description) {
        this.description = description;
    }

    public Policy getPolicy() {
        return policy;
    }

    public void setPolicy(Policy policy) {
        this.policy = policy;
    }

}

package com.ust.controller;


import com.ust.entity.Claim;
import com.ust.service.ClaimService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/claims")
public class ClaimController {

    @Autowired
    private ClaimService claimService;

    @PostMapping
    public Claim fileClaim(@RequestBody Claim claim) {
       // file a claim
       return claimService.fileClaim(claim);
    }


    @GetMapping
    public List<Claim> getAllClaims() {
      // get all claims
      return claimService.getAllClaims();
    }
}



package com.ust.controller;


import com.ust.entity.Policy;
import com.ust.service.PolicyService;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.*;

import java.util.List;

@RestController
@RequestMapping("/policies")
public class PolicyController {

    @Autowired
    private PolicyService policyService;


    @PostMapping
    public Policy addPolicy(@RequestBody Policy policy) {
        // add policy
        return policyService.addPolicy(policy);
    }


    @DeleteMapping("/{policyId}")
    public void deletePolicy(@PathVariable Long policyId) {
       // delete policy
       policyService.deletePolicy(policyId);
    }


    @GetMapping
    public List<Policy> getAllPolicies() {
        // get all policies
        return policyService.getAllPolicies();
    }
}


package com.ust.service;


import com.ust.entity.Claim;
import com.ust.repository.ClaimRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class ClaimService {

    @Autowired
    private ClaimRepository claimRepository;

    public Claim fileClaim(Claim claim) {
        // add claim to database
        return claimRepository.save(claim);
    }

    public List<Claim> getAllClaims() {
       // get all claims from database
       return claimRepository.findAll();
    }
}

package com.ust.service;


import com.ust.entity.Policy;
import com.ust.repository.PolicyRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.util.List;

@Service
public class PolicyService {

   @Autowired
    private PolicyRepository policyRepository;

    public Policy addPolicy(Policy policy) {
       // add policy to database
       return policyRepository.save(policy);
    }

    public void deletePolicy(Long policyId) {
       // delete policy from database
       policyRepository.deleteById(policyId);
    }

    public List<Policy> getAllPolicies() {
      // get all policies from database
      return policyRepository.findAll();
    }
}

package com.ust.repository;


import com.ust.entity.Claim;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface ClaimRepository extends JpaRepository<Claim, Long>  {
    // extent jpa repository
}

package com.ust.repository;

import com.ust.entity.Policy;
import org.springframework.data.jpa.repository.JpaRepository;
import org.springframework.stereotype.Repository;

@Repository
public interface PolicyRepository extends JpaRepository<Policy, Long> {
    // extends JpaRepository
}


----------------------------------------------------------------------------------------------------------------------------------------------------



--------------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------------






--------------------------------------------------------------------------------------------------------------
